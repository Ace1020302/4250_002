/*
Using Recursion; take two numbers in from the user (a human) and add them together then separate the least significant digit and add it the remaining digits and so on until you have a single digit answer. 

EX: 87345 => 8734 + 5 = 8739 => 873 + 9 = 882 => 88 + 2 = 90 => 9 + 0 = 9
*/

/*TEST CASE
 *HAPPY PATH assuming the user enters a positive valid number for a int32
 * max int value = 2,147,483,647
 * min value = 0
 * we should also test for numbers that are 1 digit
 */

using System;
using System.Numerics;

namespace ConsoleApp3
{
    internal class Program
    {
        /// <summary>
        /// main memory. NEED EXCEPTION HANDLING FOR USER INPUT(null, negative, letters)
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {

            int num1 = 0;
            int num2 = 0;
            Console.WriteLine("Enter your numbers: ");

            while (true)
            {
                try
                {
                    num1 = Convert.ToInt32(Console.ReadLine());
                    num2 = Convert.ToInt32(Console.ReadLine());

                    if (num1 < 0 || num2 < 0)
                    {
                        Console.WriteLine("Enter a positive number");
                        continue;
                    }

                    break;
                }

                //exception handling for letters and numbers too big
                catch (FormatException)
                {
                    Console.WriteLine("Invalid input.");
                }
                catch (OverflowException)
                {
                    Console.WriteLine("Number is too big or too small. Please enter a number that fits in 32 bit signed integer.");
                }
                
            }
            Console.WriteLine(ReAddition(num1, num2));
        }

        /// <summary>
        /// Should take in both numbers input by the user, if first iteration add them together, if not take off the least significant digit and add it to the number. first checks if the number is more then 1 digit. then sets num2 = (num1+num2) % 10 which gives rightmost digit. Then sets num 1 = (num1+num2) /10 which will return the rest of the number.
        /// </summary>
        /// <param name="num1">First number input by the user</param>
        /// <param name="num2">Second number input by the user</param>
        /// <returns></returns>
        static int ReAddition(int num1, int num2) 
        {
            num1 = num1 + num2;
            if (num1 < 10)
            {
               return num1;
            }
            else
            {
                num2 = num1 % 10;
                num1 = num1 / 10;
            }
            return ReAddition(num1, num2);
        }
    }
}
